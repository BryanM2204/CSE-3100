Threads: Mutual Exclusion

pthread mutext type and APIs
    // define a mutex, a shared variable
    // only one thread can lock it
    pthread_mutex_t mutex;

Initialization
    #include <pthread.h>
    int pthread_mutex_init(pthread_mutex_t * mutex, const pthread_mutex_mutexattr_t * attr);

    - initialize a mutex- return 0 on success


Destruction
    #include <pthread.h>
    int pthread_mutex_destroy(pthread_mutex_t * mutex, const pthread_mutex_mutexattr_t * attr);

    -release resources for lock - return 0 if succesful 
    - when creating initilaization - always create a destruction 


Lock/ Unlock
    #include <pthread.h>
    int pthread_mutex_lock(pthread_mutex_t * mutex);
    int pthread_mutex_unlock(pthread_mutex_t * mutex);
    
    Enter/leave the critical section. Wait (asleep!) if mutex is locked
    Return value 0 on success. (â‰ 0? something went terribly wrong)


Key Observations
    - lock and unlock come in pairs
    - you need one mutex per thing you wish to protect
        - pacakge integer and mutex in stucture
        - mutext protecs just that integer
    - lock is blocking
    - critical sections should be short
        - why?

